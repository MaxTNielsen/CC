// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers classDeclaration

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | STRICTFP | SYNCHRONIZED | TRANSIENT | INTERFACE}

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS qualifiedIdentifier]
                       [IMPLEMENTS qualifiedIdentifier] 
                       classBody

classBody ::= LCURLY {modifiers memberDecl} RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 (block | SEMI)
             | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement 
            | LPAREN JVariableDeclarator COL expression RPAREN statement | 
              FOR LPAREN [ForInit] SEMI [expression] SEMI [forUpdate] RPAREN statement 
            | RETURN [expression] SEMI
            | SEMI 
            | FINALLY statement
            | statementExpression SEMI
            | CONTINUE
            | THROW statementExpression SEMI;
            | FINALLY
formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

forInit = type variableDeclarators

forUpdate = statementExpression {COMMA statementExpression}

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer
                         {COMMA variableInitializer} [COMMA]]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | FLOAT | CONST | DOUBLE

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalExpression  // must be a valid lhs
                           [(ASSIGN | PLUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | REM_ASSIGN | SHLE | RIGHTSHIFT_ASSIGN | USHIFTRIGHT_ASSIGN | OR_ASSIGN | MINUS_ASSIGN) assignmentExpression]

conditionalExpression   :: conditionalOrExpression // 12
                            [TERNY assignmentExpression COLON conditionalExpression]

conditionalOrExpression ::= conditionalAndExpression // 11
                              {LOR conditionalAndExpression}

conditionalOrExpression ::= equalityExpression // level 11
                              {LOGICAL_OR bitwiseExpression}

conditionalAndExpression ::= equalityExpression // level 10
                               {LAND bitwiseExpression}
                              
bitwiseExpression ::= equalityExpression  // level 7
                        {(OR | XOR | AND) equalityExpression}

equalityExpression ::= relationalExpression  // level 6
                         {EQUAL relationalExpression}

relationalExpression ::= shiftExpression       // level 5
                           [(GT | LT | LE) shiftExpression
                           | INSTANCEOF referenceType]

shiftExpression ::= additiveExpression    // level 4
                        {(SHL | SHR | USHR) additiveExpression}

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {(STAR | MOD | DIV) unaryExpression}

unaryExpression ::= INC unaryExpression  // level 1
                  | DEC unaryExpression
                  | MINUS unaryExpression
                  | PLUS unaryExpression
                  | UCOMP unaryExpression 
                  | simpleUnaryExpressionzÂ½


simpleUnaryExpression ::= LNOT unaryExpression
                        | BNOT
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {DEC|INC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]
          | IMPLEMENTS creator

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL
          | TRUE        | FALSE        | NULL