// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Reserved words
ABSTRACT    ::= "abstract"
BOOLEAN     ::= "boolean"
CHAR        ::= "char"
CLASS       ::= "class"
DOUBLE		::= "double"
ELSE        ::= "else"
EXTENDS     ::= "extends"
FALSE       ::= "false"
FINAL		::= "final"
FINALLY		::= "finally"
FLOAT		::= "float"
FOR 		::= "for"
GOTO 		::= "goto"
IF          ::= "if"
IMPLEMENTS 	::= "implements"
IMPORT      ::= "import"
INSTANCEOF  ::= "instanceof"
INT         ::= "int"
NEW         ::= "new"
NULL        ::= "null"
PACKAGE     ::= "package"
PRIVATE     ::= "private"
PROTECTED   ::= "protected"
PUBLIC      ::= "public"
RETURN      ::= "return"
STATIC      ::= "static"
SUPER       ::= "super"
THIS        ::= "this"
TRUE        ::= "true"
VOID        ::= "void"
WHILE       ::= "while"
STRICTFP    ::= "strictfp"
SYNCHRONIZED ::= "synchronized"
THROW 	     ::= "throw"
THROWS 	     ::= "throws"
TRANSIENT 	 ::= "transient"
TRY  		 ::= "try"
VOLATILE     ::= "volatile"

//mine
CONST		::= "const"
FINALLY		::= "finally"
CONTINUE	::= "continue"
FLOAT		::= "float"
INTERFACE	::= "interface"
THROW		::= "throw"

//max
LONG		::= "long"
NATIVE		::= "native"
SHORT		::= "short"

// Operators
ASSIGN      ::= "="
EQUAL       ::= "=="
GT          ::= ">"
LT 			::= "<"
INC         ::= "++"
BAND		::= "&"
LAND        ::= "&&"
LE          ::= "<="
SHLE		::= "<<="		
LNOT        ::= "!"
MINUS       ::= "-"
DECR		::= "--"
PLUS        ::= "+"
PLUS_ASSIGN ::= "+="
STAR        ::= "*"
STAR_ASSIGN	::= "*="
DIV			::= "/"
REM_ASSIGN	::= "%="


//MINE
DIV			::= "/"
MOD			::= "%"
SHL			::= "<<"
SHR			::= ">>"
USHR		::= ">>>"
USHIFTRIGHT_ASSIGN  ::= ">>>="
GREATEROREQ	::= ">="
UCOM		::= "~"
OR 			::= "|"
XOR			::= "^"
AND 		::= "&"
ANDEQ       ::= "&="

//max
DIV_ASSIGN 	::= "/="
RIGHTSHIFT_ASSIGN ::= ">>="
LOR  ::= "||"
OR_ASSIGN   ::= "|="
MINUS_ASSIGN ::= "-="

// Separators
COMMA       ::= ","
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | ("1"-"9") {"0"-"9"}Gaurav
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"

// End of file
EOF            ::= "<end of file>"
